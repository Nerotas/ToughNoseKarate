name: Backend CI for Railway

on:
  push:
    branches: [main, staging]
    paths: ["BackEnd/**"]
  pull_request:
    branches: [main]
    paths: ["BackEnd/**"]

permissions:
  contents: read
  pull-requests: write

env:
  NODE_VERSION: "20"

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: BackEnd/package-lock.json

      - name: Install dependencies
        working-directory: ./BackEnd
        run: npm ci

      - name: Run tests with coverage
        working-directory: ./BackEnd
        run: npm run test:coverage:ci

      - name: Show coverage output (debug)
        if: always()
        working-directory: ./BackEnd
        run: |
          echo "Coverage directory listing:" || true
          ls -al coverage || true

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: BackEnd/coverage

      - name: Upload coverage summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-summary
          path: BackEnd/coverage/**

      - name: Check coverage threshold
        working-directory: ./BackEnd
        run: |
          THRESHOLD=50
          SUMMARY_JSON=coverage/coverage-summary.json
          FINAL_JSON=coverage/coverage-final.json
          if [ -f "$SUMMARY_JSON" ]; then
            # Only enforce statements/functions/lines - skip branches due to NestJS decorators
            node -e "const fs=require('fs');const t=${THRESHOLD};const s=JSON.parse(fs.readFileSync('$SUMMARY_JSON'));const total=s.total||s;const metrics=['statements','functions','lines'];let ok=true;metrics.forEach(m=>{const pct=total[m]&&total[m].pct?total[m].pct:0; if(pct < t){console.error(m+' coverage '+pct+'% < '+t+'%'); ok=false}}); if(!ok){process.exit(1);} else {console.log('Coverage threshold met');}"
          elif [ -f "$FINAL_JSON" ]; then
            node -e "const fs=require('fs');const t=${THRESHOLD};const s=JSON.parse(fs.readFileSync('$FINAL_JSON'));let totals={statements:{total:0,covered:0},functions:{total:0,covered:0},lines:{total:0,covered:0}};Object.values(s).forEach(f=>{if(f.statements){totals.statements.total+=f.statements.total||0;totals.statements.covered+=f.statements.covered||0;} if(f.functions){totals.functions.total+=f.functions.total||0;totals.functions.covered+=f.functions.covered||0;} if(f.lines){totals.lines.total+=f.lines.total||0;totals.lines.covered+=f.lines.covered||0;}});let ok=true;['statements','functions','lines'].forEach(m=>{const tot=totals[m].total;const cov=totals[m].covered;const pct=tot>0?Math.round((cov/tot)*100*100)/100:100; if(pct < t){console.error(m+' coverage '+pct+'% < '+t+'%'); ok=false}}); if(!ok){process.exit(1);} else {console.log('Coverage threshold met');}"
          else
            echo "No coverage JSON found (coverage-summary.json or coverage-final.json)" >&2
            exit 1
          fi

      - name: Create coverage markdown
        if: always()
        working-directory: ./BackEnd
        run: |
          SUMMARY_JSON=coverage/coverage-summary.json
          FINAL_JSON=coverage/coverage-final.json
          if [ -f "$SUMMARY_JSON" ]; then
            node -e "const fs=require('fs');const s=JSON.parse(fs.readFileSync('$SUMMARY_JSON'));const rows=Object.entries(s).map(([k,v])=>\`| \${k} | \${v.statements.pct}% | \${v.branches.pct}% | \${v.functions.pct}% | \${v.lines.pct}% |\`);const header='| File | Stmts | Branch | Funcs | Lines |\n|---|---:|---:|---:|---:';fs.writeFileSync('coverage_report.md', '# Backend Coverage Report\n\n'+header+'\n'+rows.join('\n'));"
          elif [ -f "$FINAL_JSON" ]; then
            # Simple coverage report generation
            node -e "const fs=require('fs');const data=JSON.parse(fs.readFileSync('$FINAL_JSON'));let totals={statements:{total:0,covered:0},functions:{total:0,covered:0},lines:{total:0,covered:0},branches:{total:0,covered:0}};const files=[];Object.entries(data).forEach(([file,metrics])=>{if(file.includes('node_modules'))return;['statements','functions','lines','branches'].forEach(m=>{if(metrics[m]){totals[m].total+=metrics[m].total||0;totals[m].covered+=metrics[m].covered||0;}});const stmt=metrics.statements?Math.round((metrics.statements.covered/metrics.statements.total)*100)||0:0;const branch=metrics.branches?Math.round((metrics.branches.covered/metrics.branches.total)*100)||0:0;const func=metrics.functions?Math.round((metrics.functions.covered/metrics.functions.total)*100)||0:0;const line=metrics.lines?Math.round((metrics.lines.covered/metrics.lines.total)*100)||0:0;files.push(\`| \${file.replace(process.cwd()+'/','').replace(/\\\\/g,'/')} | \${stmt}% | \${branch}% | \${func}% | \${line}% |\`);});const header='# Backend Coverage Report\n\n| File | Stmts | Branch | Funcs | Lines |\n|---|---:|---:|---:|---:|';const stmtPct=Math.round((totals.statements.covered/totals.statements.total)*100)||0;const branchPct=Math.round((totals.branches.covered/totals.branches.total)*100)||0;const funcPct=Math.round((totals.functions.covered/totals.functions.total)*100)||0;const linePct=Math.round((totals.lines.covered/totals.lines.total)*100)||0;const totalRow=\`| **TOTAL** | **\${stmtPct}%** | **\${branchPct}%** | **\${funcPct}%** | **\${linePct}%** |\`;fs.writeFileSync('coverage_report.md',header+'\n'+totalRow+'\n'+files.join('\n'));" || echo "# Backend Coverage Report\n\nNo coverage data available." > coverage_report.md
          else
            echo "# Backend Coverage Report\n\nNo coverage summary found." > coverage_report.md
          fi

      - name: Read coverage report
        id: read_coverage
        if: always()
        working-directory: ./BackEnd
        run: |
          if [ -f coverage_report.md ]; then
            echo "comment<<EOF" >> $GITHUB_OUTPUT
            cat coverage_report.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "comment<<EOF" >> $GITHUB_OUTPUT
            echo "No backend coverage report generated." >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Post coverage comment to PR
        # Skip posting comment for forked PRs because secrets/GITHUB_TOKEN are not available
        if: always() && github.event_name == 'pull_request' && (github.event.pull_request.head.repo.fork == false)
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Backend coverage results for this PR:

            ${{ steps.read_coverage.outputs.comment }}

      - name: Build application
        working-directory: ./BackEnd
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            BackEnd/dist/
            BackEnd/package.json
            BackEnd/package-lock.json
